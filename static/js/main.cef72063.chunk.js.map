{"version":3,"sources":["App.module.css","Redux/selectors.js","Redux/actions.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","Redux/reducers.js","Redux/store.js","index.js","Components/ContactList/ContactList.module.css","Components/ContactForm/ContactForm.module.css"],"names":["module","exports","getContacts","state","contacts","items","filteredContacts","normalizedContact","filter","getFilter","toLowerCase","name","includes","addContact","createAction","deleteContact","changeFilter","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleFormChange","target","value","resetForm","className","styles","form","onSubmit","event","preventDefault","nameUnique","nameHandler","find","isContactUnique","alert","contact","id","uuid","actions","input","type","placeholder","onChange","button","ContactItem","onRemove","item","span","onClick","ContactList","contactsActions","length","list","map","Filter","App","container","createReducer","payload","_","combineReducers","persistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.cef72063.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__lSOzg\"};","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const filteredContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedContact = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedContact),\n  );\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contacts/add');\nexport const deleteContact = createAction('contacts/delete');\nexport const changeFilter = createAction('contacts/changeFilter');\n","import { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from '../../Redux/selectors';\nimport * as actions from '../../Redux/actions';\n\nimport styles from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleFormChange = ({ target }) => {\n    const { name, value } = target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const isContactUnique = nameUnique => {\n    const nameHandler = nameUnique.toLowerCase();\n    return contacts.find(({ name }) => name.toLowerCase() === nameHandler);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const nameNotUnique = isContactUnique(name);\n\n    if (nameNotUnique) {\n      alert(`${name} is already exist`);\n    } else {\n      const contact = { id: uuid(), name, number };\n      dispatch(actions.addContact(contact));\n    }\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter name\"\n        value={name}\n        onChange={handleFormChange}\n      />\n      <input\n        className={styles.input}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter phone number\"\n        value={number}\n        onChange={handleFormChange}\n      />\n      <button className={styles.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import styles from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as contactsActions from '../../Redux/actions';\nimport { filteredContacts } from '../../Redux/selectors';\n\nconst ContactItem = ({ id, name, number, onRemove }) => {\n  return (\n    <li className={styles.item}>\n      <span className={styles.span}>{name}:</span>\n      <span className={styles.span}>{number}</span>\n      <button className={styles.button} onClick={() => onRemove(id)}>\n        X\n      </button>\n    </li>\n  );\n};\n\nconst ContactList = () => {\n  const contacts = useSelector(filteredContacts);\n  const dispatch = useDispatch();\n\n  const deleteContact = id => dispatch(contactsActions.deleteContact(id));\n\n  if (contacts.length === 0) return null;\n  return (\n    <ul className={styles.list}>\n      {contacts.map(contact => (\n        <ContactItem key={contact.id} {...contact} onRemove={deleteContact} />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","const Filter = ({ filter, onChange }) => {\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      value={filter}\r\n      onChange={onChange}\r\n      placeholder=\"Enter name to search\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import ContactForm from './Components/ContactForm/ContactForm';\nimport ContactList from './Components/ContactList/ContactList';\nimport Filter from './Components/Filter/Filter';\nimport styles from './App.module.css';\n\nexport default function App() {\n  /*   const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  useEffect(() => {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n    }\n  }, []);\n\n  const handleFormSumbit = contact => {\n    setContacts(prevContacts => [...prevContacts, contact]);\n  };\n\n  const isContactUnique = checkName => {\n    return contacts.find(\n      ({ name }) => name.toLowerCase() === checkName.toLowerCase(),\n    );\n  };\n\n  const handleRemoveContact = contactId => {\n    setContacts(prevContacts => [\n      ...prevContacts.filter(({ id }) => id !== contactId),\n    ]);\n  };\n\n  const handleFilterChange = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  const getFilteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  const filteredContacts = getFilteredContacts(); */\n\n  return (\n    <div className={styles.container}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <h3>Find contacts by name</h3>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, changeFilter } from './actions';\n\nconst items = createReducer([], {\n  [addContact]: (state, { payload }) => [payload, ...state],\n  [deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import contactsReducer from './reducers';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\n\nconst persistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = [...getDefaultMiddleware({}), logger];\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(persistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store, persistor } from './Redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2b2gz\",\"item\":\"ContactList_item__nQd7l\",\"span\":\"ContactList_span__3Pay8\",\"button\":\"ContactList_button__DiITj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3o6fN\",\"input\":\"ContactForm_input__3ZdqG\",\"button\":\"ContactForm_button__2d_8w\"};"],"sourceRoot":""}